<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Creer Evenement</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            padding: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="mb-4">Creer Evenement</h1>
        <form id="eventForm">
            <div class="mb-3">
                <label for="summary" class="form-label">Nom</label>
                <input type="text" class="form-control" id="summary" name="summary" required>
            </div>
            <div class="mb-3">
                <label for="location" class="form-label">Lieu</label>
                <input type="text" class="form-control" id="location" name="location">
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description"></textarea>
            </div>
            <div class="mb-3">
                <label for="startDateTime" class="form-label">Début</label>
                <input type="datetime-local" class="form-control" id="startDateTime" name="startDateTime" required>
            </div>
            <div class="mb-3">
                <label for="endDateTime" class="form-label">Fin</label>
                <input type="datetime-local" class="form-control" id="endDateTime" name="endDateTime"  required>
            </div>
            <button type="submit" class="btn btn-primary">Creer</button>
        </form>
        <div id="responseMessage" class="mt-3"></div>
    </div>

    <script>
        document.getElementById('eventForm').addEventListener('submit', async function(event) {
            event.preventDefault();

            const formData = new FormData(event.target);
            const data = Object.fromEntries(formData.entries());

            data.startDateTime = convertToISO(data.startDateTime);
            data.endDateTime = convertToISO(data.endDateTime);

            try {
                const response = await fetch('/eventCreation', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                const result = await response.json();
                if (response.ok) {
                    document.getElementById('responseMessage').innerHTML = `
                        <div class="alert alert-success">
                            Événement créé avec succès! <a href="${result.link}" target="_blank">Voir l'événement</a>
                        </div>
                    `;
                } else {
                    document.getElementById('responseMessage').innerHTML = `
                        <div class="alert alert-danger">
                            Échec de la création de l'événement.
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error:', error);
                document.getEle
                mentById('responseMessage').innerHTML = `
                    <div class="alert alert-danger">
                        Une erreur est survenue lors de la création de l'événement.
                    </div>
                `;
            }
        });

       function convertToISO(datetimeLocal) {
    const date = new Date(datetimeLocal);
    return date.toISOString();
}
    </script>
</body>
</html>
